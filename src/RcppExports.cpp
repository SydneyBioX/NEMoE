// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rDirichlet
NumericMatrix rDirichlet(int n, NumericVector a);
RcppExport SEXP _NEMoE_rDirichlet(SEXP nSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(rDirichlet(n, a));
    return rcpp_result_gen;
END_RCPP
}
// rSample
NumericMatrix rSample(NumericMatrix Prob);
RcppExport SEXP _NEMoE_rSample(SEXP ProbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Prob(ProbSEXP);
    rcpp_result_gen = Rcpp::wrap(rSample(Prob));
    return rcpp_result_gen;
END_RCPP
}
// projMultiConstraint
Eigen::MatrixXd projMultiConstraint(Eigen::MatrixXd Beta0, double alpha);
RcppExport SEXP _NEMoE_projMultiConstraint(SEXP Beta0SEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Beta0(Beta0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(projMultiConstraint(Beta0, alpha));
    return rcpp_result_gen;
END_RCPP
}
// calcProb
Eigen::MatrixXd calcProb(Eigen::MatrixXd X, Eigen::MatrixXd B);
RcppExport SEXP _NEMoE_calcProb(SEXP XSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(calcProb(X, B));
    return rcpp_result_gen;
END_RCPP
}
// predProb
Eigen::MatrixXd predProb(Eigen::MatrixXd X, Eigen::MatrixXd Z, NumericVector y, Eigen::MatrixXd W, Eigen::MatrixXd V);
RcppExport SEXP _NEMoE_predProb(SEXP XSEXP, SEXP ZSEXP, SEXP ySEXP, SEXP WSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type W(WSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(predProb(X, Z, y, W, V));
    return rcpp_result_gen;
END_RCPP
}
// compLikeli
Eigen::MatrixXd compLikeli(Eigen::MatrixXd X, Eigen::MatrixXd Z, NumericVector y, Eigen::MatrixXd W, Eigen::MatrixXd V);
RcppExport SEXP _NEMoE_compLikeli(SEXP XSEXP, SEXP ZSEXP, SEXP ySEXP, SEXP WSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type W(WSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(compLikeli(X, Z, y, W, V));
    return rcpp_result_gen;
END_RCPP
}
// calcLL
NumericMatrix calcLL(Eigen::MatrixXd X, Eigen::MatrixXd Z, NumericMatrix y, NumericVector seg, Eigen::MatrixXd W, Eigen::MatrixXd V, NumericMatrix lambda1, NumericVector lambda2, NumericMatrix alpha1, double alpha2, bool multiply);
RcppExport SEXP _NEMoE_calcLL(SEXP XSEXP, SEXP ZSEXP, SEXP ySEXP, SEXP segSEXP, SEXP WSEXP, SEXP VSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP multiplySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seg(segSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type W(WSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< bool >::type multiply(multiplySEXP);
    rcpp_result_gen = Rcpp::wrap(calcLL(X, Z, y, seg, W, V, lambda1, lambda2, alpha1, alpha2, multiply));
    return rcpp_result_gen;
END_RCPP
}
// sMulti
Eigen::MatrixXd sMulti(Eigen::MatrixXd X, Eigen::MatrixXd y, Eigen::VectorXd lambda, NumericVector R, double alpha, double beta_max);
RcppExport SEXP _NEMoE_sMulti(SEXP XSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP RSEXP, SEXP alphaSEXP, SEXP beta_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_max(beta_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(sMulti(X, y, lambda, R, alpha, beta_max));
    return rcpp_result_gen;
END_RCPP
}
// fitNEMoE0
Eigen::MatrixXd fitNEMoE0(Eigen::MatrixXd X, NumericVector seg, Eigen::MatrixXd Z, NumericMatrix y, int K, NumericMatrix lambda1, NumericVector lambda2, NumericMatrix alpha1, double alpha2, Eigen::MatrixXd V_init, Eigen::MatrixXd W_init, double beta_max, int EM_opt, int itmax, int itmin, bool adapt, bool btr, bool stop_all, bool verbose, bool early_stop);
RcppExport SEXP _NEMoE_fitNEMoE0(SEXP XSEXP, SEXP segSEXP, SEXP ZSEXP, SEXP ySEXP, SEXP KSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP V_initSEXP, SEXP W_initSEXP, SEXP beta_maxSEXP, SEXP EM_optSEXP, SEXP itmaxSEXP, SEXP itminSEXP, SEXP adaptSEXP, SEXP btrSEXP, SEXP stop_allSEXP, SEXP verboseSEXP, SEXP early_stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seg(segSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V_init(V_initSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type W_init(W_initSEXP);
    Rcpp::traits::input_parameter< double >::type beta_max(beta_maxSEXP);
    Rcpp::traits::input_parameter< int >::type EM_opt(EM_optSEXP);
    Rcpp::traits::input_parameter< int >::type itmax(itmaxSEXP);
    Rcpp::traits::input_parameter< int >::type itmin(itminSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt(adaptSEXP);
    Rcpp::traits::input_parameter< bool >::type btr(btrSEXP);
    Rcpp::traits::input_parameter< bool >::type stop_all(stop_allSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type early_stop(early_stopSEXP);
    rcpp_result_gen = Rcpp::wrap(fitNEMoE0(X, seg, Z, y, K, lambda1, lambda2, alpha1, alpha2, V_init, W_init, beta_max, EM_opt, itmax, itmin, adapt, btr, stop_all, verbose, early_stop));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NEMoE_rDirichlet", (DL_FUNC) &_NEMoE_rDirichlet, 2},
    {"_NEMoE_rSample", (DL_FUNC) &_NEMoE_rSample, 1},
    {"_NEMoE_projMultiConstraint", (DL_FUNC) &_NEMoE_projMultiConstraint, 2},
    {"_NEMoE_calcProb", (DL_FUNC) &_NEMoE_calcProb, 2},
    {"_NEMoE_predProb", (DL_FUNC) &_NEMoE_predProb, 5},
    {"_NEMoE_compLikeli", (DL_FUNC) &_NEMoE_compLikeli, 5},
    {"_NEMoE_calcLL", (DL_FUNC) &_NEMoE_calcLL, 11},
    {"_NEMoE_sMulti", (DL_FUNC) &_NEMoE_sMulti, 6},
    {"_NEMoE_fitNEMoE0", (DL_FUNC) &_NEMoE_fitNEMoE0, 20},
    {NULL, NULL, 0}
};

RcppExport void R_init_NEMoE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
